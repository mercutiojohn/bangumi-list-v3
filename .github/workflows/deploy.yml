name: Deploy to Server

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        docker build --tag bangumi-list-v3:latest --build-arg GA_ID=${{ secrets.GA_ID }} .

    - name: Save Docker image
      run: |
        docker save bangumi-list-v3:latest -o bangumi-list-v3.tar

    - name: Create deployment files
      run: |
        # 创建 docker-compose.yml
        cat > docker-compose.yml << 'EOF'
        version: '3.8'
        services:
          bangumi-list:
            image: bangumi-list-v3:latest
            container_name: bangumi-list-v3
            ports:
              - "3000:3000"
            restart: unless-stopped
            environment:
              - NODE_ENV=production
              - DATA_DIR=/app/.run
              - RUNTIME_DIR=/app/.run
            volumes:
              - ./data:/app/.run
            env_file:
              - .env
        EOF

        # 创建 .env 文件模板
        # cat > .env.example << 'EOF'
        # NODE_ENV=production
        # PORT=3000
        # JWT_SECRET=请设置强密码
        # GITHUB_WEBHOOK_SECRET=请设置webhook密钥
        # ADMIN_EMAIL=请设置管理员邮箱
        # ADMIN_PASSWORD=请设置强密码
        # BANGUMI_API_TOKEN=请设置bangumi_api_token
        # DATABASE_URL=file:./data/db.db
        # DATA_DIR=/app/.run
        # RUNTIME_DIR=/app/.run
        # LOG_DIR=/app/.run/logs
        # LOG_FILE=server.log
        # DB_DIR=/app/.run
        # DATA_FILE=data.json

        # # RSS 服务配置
        # RSS_PROXY_HOST=127.0.0.1
        # RSS_PROXY_PORT=7890
        # RSS_DEBUG_LOGS=false
        # RSS_MAX_RETRIES=3
        # RSS_BASE_DELAY=3000
        # RSS_MAX_CONCURRENT=1
        # EOF

        cat > .env << 'EOF'
        NODE_ENV=production
        PORT=3000
        JWT_SECRET=${{ secrets.JWT_SECRET || 'jwt_secret_change_me' }}
        GITHUB_WEBHOOK_SECRET=${{ secrets.GITHUB_WEBHOOK_SECRET || 'webhook_secret_change_me' }}
        ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL || 'admin@abc123.com' }}
        ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD || 'abc123' }}
        BANGUMI_API_TOKEN=${{ secrets.BANGUMI_API_TOKEN || 'no_bangumi_api_token' }}
        DATABASE_URL=file:./data/db.db
        DATA_DIR=/app/.run
        RUNTIME_DIR=/app/.run
        LOG_DIR=/app/.run/logs
        LOG_FILE=server.log
        DB_DIR=/app/.run
        DATA_FILE=data.json

        # RSS 服务配置
        RSS_PROXY_HOST=127.0.0.1
        RSS_PROXY_PORT=7890
        RSS_DEBUG_LOGS=false
        RSS_MAX_RETRIES=3
        RSS_BASE_DELAY=3000
        RSS_MAX_CONCURRENT=1
        EOF

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts

    - name: Create deployment directory
      run: |
        ssh -o LogLevel=ERROR -i ~/.ssh/id_rsa ${{ secrets.USERNAME }}@${{ secrets.HOST }} "
          mkdir -p /opt/bangumi-list-v3
        "

    - name: Upload files to server
      run: |
        # 使用 sftp 避免 shell 输出问题
        sftp -o LogLevel=ERROR -i ~/.ssh/id_rsa ${{ secrets.USERNAME }}@${{ secrets.HOST }} << 'EOF'
        cd /opt/bangumi-list-v3
        put bangumi-list-v3.tar
        put docker-compose.yml
        # put .env.example
        put .env
        quit
        EOF

    - name: Deploy on server
      run: |
        ssh -o LogLevel=ERROR -i ~/.ssh/id_rsa ${{ secrets.USERNAME }}@${{ secrets.HOST }} "
          cd /opt/bangumi-list-v3

          # 停止旧容器
          docker-compose down 2>/dev/null || docker stop bangumi-list-v3 2>/dev/null || true
          docker rm bangumi-list-v3 2>/dev/null || true

          # 强制删除旧镜像以确保更新
          docker rmi bangumi-list-v3:latest 2>/dev/null || true

          # 确保数据目录存在并设置权限
          mkdir -p ./data/logs
          chmod -R 755 ./data

          # 加载新镜像
          docker load -i bangumi-list-v3.tar

          # 如果不存在 .env 文件，从模板创建
          if [ ! -f .env ]; then
            cp .env.example .env
            echo '请编辑 .env 文件配置环境变量'
          fi

          # 启动新容器
          docker-compose up -d

          # 清理镜像文件
          rm -f bangumi-list-v3.tar

          echo '部署完成！'
          echo '应用已启动在端口 3000'
          docker ps | grep bangumi-list
        " 2>/dev/null

    - name: Cleanup
      if: always()
      run: |
        # 清理本地文件
        rm -f ~/.ssh/id_rsa
        rm -f ~/.ssh/known_hosts
        rm -f bangumi-list-v3.tar
        rm -f docker-compose.yml
        rm -f .env

        # 清理 SSH 相关配置
        if [ -d ~/.ssh ]; then
          chmod 700 ~/.ssh
          rm -f ~/.ssh/id_rsa*
        fi

        # 清理临时文件
        rm -f /tmp/bangumi-*

        echo "清理完成"

